// each thread: computes outputs across chan dim, using inputs across chan dim
CUCL_GLOBAL_KERNEL void %(rtc_func_name)( GASQ float const * const in, // CUCL IN img:chan:y:x
					  GASQ float * const prob ) // CUCL OUT img:chan:y:x
{
  // CUCL IX GLOB_ID_1D prob use_dims=img:y:x
  if( GLOB_ID_1D >= %(GLOB_ID_1D_dims_prod) ) { return; }
  float pel_sum = {0.0f};
  float pel_max = {0.0f};
  // iteratate over chans for all operations
  int32_t const base_ix = %(GLOB_ID_1D_img)*%(prob_img_sz) + %(GLOB_ID_1D_y)*%(prob_y_sz) + %(GLOB_ID_1D_x)*%(prob_x_sz);
  for( int32_t off = 0, chan_ix = 0; chan_ix < %(prob_chan_dim); ++chan_ix, off += %(prob_chan_sz) ) { 
    pel_max = max(pel_max, in[base_ix + off] ); 
  }
  for( int32_t off = 0, chan_ix = 0; chan_ix < %(prob_chan_dim); ++chan_ix, off += %(prob_chan_sz) ) { 
    float const v = exp( in[base_ix + off] - pel_max );
    prob[base_ix + off] = v; 
    pel_sum += v;
  }
  for( int32_t off = 0, chan_ix = 0; chan_ix < %(prob_chan_dim); ++chan_ix, off += %(prob_chan_sz) ) { 
    prob[base_ix + off] /= pel_sum;
  }
}

