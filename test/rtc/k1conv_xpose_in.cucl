CUCL_GLOBAL_KERNEL void %(rtc_func_name)( GASQ float const * const in_ref, // CUCL IN img:chan:y:x
					  GASQ float * const in ) // CUCL OUT blk:blk_iter:blk_iter_chan:blk_pel
{
  // CUCL IX GLOB_ID_1D in
  if( GLOB_ID_1D >= %(in_dims_prod) ) { return; }
  int32_t const in_chan_ix = %(GLOB_ID_1D_blk_iter)*%(in_blk_iter_chan_dim) + %(GLOB_ID_1D_blk_iter_chan);
  int32_t const pel_ix = %(GLOB_ID_1D_blk)*%(in_blk_pel_dim) + %(GLOB_ID_1D_blk_pel);
  // CUCL IX pel_ix in_ref use_dims=img:y:x
  float v = 0.0f;
  if( ( in_chan_ix < %(in_ref_chan_dim) ) && ( %(pel_ix_img) < %(in_ref_img_dim) ) ) {
    v = in_ref[ %(pel_ix_img)*%(in_ref_img_stride) +
	    in_chan_ix*%(in_ref_chan_stride) +
	    %(pel_ix_y)*%(in_ref_y_stride) +
	    %(pel_ix_x)*%(in_ref_x_stride) ];
  }
  in[GLOB_ID_1D] = v;
}

/*

in_pels = num_img * in_ref.sz.dims_prod()
num_in_blks = u32_ceil_div( in_pels, block_chan_pels )

normal in_ref dims: img, chan, y, x OR img, chan, pels // where pels = x,y dims merged

block_iters = u32_ceil_div( chan, in_chan_tile ) // for ccp1, 96/8=12
pad_chan =  block_iter * in_chan_tile // pad by up to (in_chan_tile-1) [typ. 8; pad with zeros? garbage okay?]
block_chan_pels = t_tile_sz*tix_pels_tile_sz // typically 8*8=64
block_iter_pels = block_chan_pels * in_chan_tile; // typically 512

block_pels = 12*512 = 6144 // note: 24576 bytes, prob. too big for SM to fully cache, but 512=2K (per-iter cache) is fine.


xposed in dims (inner): (block_iter,  block_iter_chan, block_iter_pel)  == block_pel
            sz (inner): (block_iters, in_chan_tile,    block_chan_pels) == block_pels (only inner 2 dims need to be linear?)

*/
