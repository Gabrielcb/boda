//#define LRN_MATCH_CAFFE
// note: the results of LRN_MATCH_CAFFE mode differ from the 'regular' mode by 7e-4 (max abs diff) and 8e-6 (avg abs
// diff) (on one example). it would seem safe to assume the non-caffe mode below is more stable, since the main
// difference is in not doing -+s on squared values, but this hasn't been checked in detail.  now, cuDNN results differ
// from both the match-caffe and non-match-caffe modes below, and it's not clear how, with a max abs diff of ~3e-4 on
// the same example. again, it's unclear exactly how it's different or which modes are more 'right' or if it much
// matters. but the errors are significant enough to make correctness testing difficult, as compounded errors make the
// max-abs-diff creep up toward 1e-3, which is generally large enough to indicate an error and/or be hard to waive
// (given the ranges of values).

// each thread: computes outputs across chan dim, using inputs across chan dim
CUCL_GLOBAL_KERNEL void %(rtc_func_name)( GASQ float const * const in, // CUCL IN img:chan:y:x
					  GASQ float * const out ) // CUCL OUT img:chan:y:x
{
  // CUCL IX GLOB_ID_1D out use_dims=img:y:x
  if( GLOB_ID_1D >= %(GLOB_ID_1D_dims_prod) ) { return; }
  // iteratate over chans
  float ls_buf[%(local_size)] = {0.0f};
  int32_t const hls = %(local_size) >> 1;
  int32_t const out_base_ix = %(GLOB_ID_1D_img)*%(out_img_sz) + %(GLOB_ID_1D_y)*%(out_y_sz) + %(GLOB_ID_1D_x)*%(out_x_sz);  
  float ls_sum = 0.0f;
  float const alpha_over_ls = (float)(%(alpha)) / (float)(%(local_size));

  for( int32_t in_chan_ix = 0; in_chan_ix < %(out_chan_dim) + hls; ++in_chan_ix ) {
    int32_t const in_off = in_chan_ix*%(out_chan_sz);
    int32_t const lsb_ix = in_chan_ix %% %(local_size);
    float const ls_old = ls_buf[lsb_ix];
    ls_buf[lsb_ix] = (in_chan_ix < %(out_chan_dim)) ? in[out_base_ix + in_off] : 0.0f;
#ifdef LRN_MATCH_CAFFE
    ls_sum += ls_buf[lsb_ix]*ls_buf[lsb_ix]; ls_sum -= ls_old*ls_old; 
#endif    
    if( in_chan_ix >= hls ) {
      int32_t const out_chan_ix = in_chan_ix - hls;
#ifdef LRN_MATCH_CAFFE
      float const pow_base = (%(k) + ls_sum*alpha_over_ls);
      float const scale = powf( pow_base, -%(beta) );
#else
      ls_sum = 0.0f;
      for( int32_t i = 0; i != %(local_size); ++i ) { ls_sum += ls_buf[i]*ls_buf[i]; }
      //float const scale = powf( (%(k) + %(alpha)*ls_sum/%(local_size)), -%(beta) );
      float const scale = powf( (%(k) + ls_sum*%(alpha)/%(local_size)), -%(beta) );
#endif      
      out[out_base_ix + out_chan_ix*%(out_chan_sz)] = ls_buf[(lsb_ix+%(local_size)-hls) %% %(local_size)] * scale;
    }
  }
}
#undef LRN_MATCH_CAFFE

