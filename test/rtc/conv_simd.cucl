CUCL_GLOBAL_KERNEL void %(rtc_func_name)( GASQ float const * const filts, // CUCL IN in_chan:y:x:out_chan
					  GASQ float const * const biases, // CUCL IN out_chan
					  GASQ float const * const in, // CUCL IN chan:pel
					  GASQ float * const out // CUCL OUT chan:pel
                                          )
// yeah, okay, we don't use stride/in_pad here. but in codegen, we
// check that the stride is really 1, so we must declare then here.
/* stride */  // CUCL REF y:x 
/* in_pad */  // CUCL REF y:x 
/* work */  // CUCL REF pels_blk:out_chan_blk:pels_tile:out_chan_tile:pels:out_chan
/* out_ref */  // CUCL REF img:chan:y:x
/* in_pels */  // CUCL REF img:y:x
/* out_pels */  // CUCL REF img:y:x
{
  // CUCL IX GRP_ID_1D work use_dims=pels_blk:out_chan_blk
  // CUCL IX LOC_ID_1D work use_dims=pels_tile:out_chan_tile
  // note: <each thread handles> work use_dims=pels:out_chan; with pels_sz==out_chan_sz==t_tile_sz (currently); loops over in.chan==filts.in_chan
  // note: for k1conv we have filts_y_dim==filts_x_dim==1
  // CUCL IX filt_pix filts use_dims=in_chan:y:x
  // CUCL IX in_pix in_pels

  float out_tile[%(work_pels_dim)*%(work_out_chan_dim)] = {0}; // tile of output for this thread to compute, stored in registers
  // reg. buffers for one strip each from in and filts, for the same filts_ix_out_chan_elem
  float%(vw) filts_strip[%(work_out_chan_dim)/%(vw)]; // across output chans (stride is blk_filt_ix_sz )
  float%(vw) in_strip[%(work_pels_dim)/%(vw)]; // across pels (approx square block in x/y space, favoring x if sqrt() not integer)

  int const filts_off_thr = ( %(GRP_ID_1D_out_chan_blk)*%(work_out_chan_tile_dim) + %(LOC_ID_1D_out_chan_tile) )*%(work_out_chan_dim)/%(vw)*%(filts_out_chan_sz);
  int const in_off_thr = ( %(GRP_ID_1D_pels_blk)*%(work_pels_tile_dim) + %(LOC_ID_1D_pels_tile) )*%(work_pels_dim)/%(vw)*%(in_pel_sz);

  int32_t filts_off = filts_off_thr;
  int32_t in_off = in_off_thr;
  // iteratate over filter elements
  for( int32_t ic = 0; ic < %(in_chan_dim); ic += %(Kb) ) {
    %(inner_loop_body);
    filts_off += %(Kb)*%(filts_in_chan_sz)/%(vw);
    in_off += %(Kb)*%(in_chan_sz)/%(vw);
  }

  int32_t const out_chan = ( %(GRP_ID_1D_out_chan_blk)*%(work_out_chan_tile_dim) + %(LOC_ID_1D_out_chan_tile) )*%(work_out_chan_dim)/%(vw);
  int32_t out_off = 
    ( %(GRP_ID_1D_pels_blk)*%(work_pels_tile_dim) + %(LOC_ID_1D_pels_tile) )*%(work_pels_dim)/%(vw)*%(out_pel_sz) +
    out_chan*%(out_chan_sz);
  
  for( int32_t ty = 0; ty < %(work_out_chan_dim)/%(vw); ++ty ) { 
    filts_strip[ty] = ((GASQ float%(vw) const *)biases)[out_chan+ty]; }

  for( int32_t ty = 0; ty < %(work_out_chan_dim); ++ty ) {
    %(outs_to_in_strip);
    %(stores);
    out_off += %(out_chan_sz)/%(vw);
  }
}

