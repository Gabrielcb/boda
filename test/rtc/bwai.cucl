CUCL_GLOBAL_KERNEL void %(rtc_func_name)( GASQ float const * const a, // CUCL IN M:K
					  GASQ float const * const bt, // CUCL IN N:K
					  GASQ void const * const work,  // CUCL REF Mg:Ng:Mb:Nb:Kb:Mt:Nt
					  GASQ float * const c )  // CUCL OUT M:N
{
  // CUCL IX GRP_ID_1D work use_dims=Mg:Ng
  // CUCL IX LOC_ID_1D work use_dims=Mb:Kb
  // note: <each thread handles> work use_dims=Mt:Nt (1/Kb'th of the sum of each m,n output pt);loops over K with stride Kb
  LOCSHAR_MEM float a_sm[%(a_sm_sz)];
  LOCSHAR_MEM float b_sm[%(b_sm_sz)];
  float c_t[%(work_Mt_dim)*%(work_Nt_dim)] = {0}; // tile of output for this thread to compute, stored in registers
  float a_r[%(work_Mt_dim)]; 
  float b_r[%(work_Nt_dim)];

  int32_t a_off = %(GRP_ID_1D_Mg)*%(work_Mb_dim)*%(work_Mt_dim)*%(a_M_stride) + %(LOC_ID_1D_Kb); 

  LSMASQ float * const a_sm_off = a_sm + %(LOC_ID_1D_Mb)*%(work_Mt_dim)*%(work_Kb_dim) + %(LOC_ID_1D_Kb);
  for( int32_t k = 0; k < %(a_K_dim); k += %(work_Kb_dim) ) {
    BARRIER_SYNC;
    %(sm_loads);
    a_off += %(work_Kb_dim);
    //b_off += %(work_Kb_dim);
    BARRIER_SYNC; 
    // (loads);
    // (fmas);
  }

  int32_t out_off = 0;
  for( int32_t m = 0; m < %(work_Mt_dim); ++m ) {
    // (outs_to_b_r);
    // (stores);
    out_off += 1;
  }
}
