CUCL_GLOBAL_KERNEL void %(rtc_func_name)( GASQ float const * const filts, // CUCL IN out_chan:y:x:in_chan
					  GASQ float const * const biases, // CUCL IN out_chan
					  GASQ float const * const in, // CUCL IN img:y:x:chan
					  GASQ float * const out, // CUCL OUT img:chan:y:x
					  int32_t const flags )
// yeah, okay, we don't use stride/in_pad here. but in codegen, we
// check that the stride is really 1, so we must declare then here.
/* stride */  // CUCL REF y:x 
/* in_pad */  // CUCL REF y:x 
/* work */  // CUCL REF pels_blk:out_chan_blk:pels_tile:out_chan_tile:pels:out_chan
/* out_ref */  // CUCL REF img:chan:y:x
{
  // CUCL IX GRP_ID_1D work use_dims=pels_blk:out_chan_blk
  // CUCL IX LOC_ID_1D work use_dims=pels_tile:out_chan_tile
  // note: <each thread handles> work use_dims=pels:out_chan; with pels_sz==out_chan_sz==t_tile_sz (currently); loops over in.chan==filts.in_chan
  // note: for k1conv we have filts_y_dim==filts_x_dim==1

  float out_tile[%(work_pels_dim)*%(work_out_chan_dim)] = {0}; // tile of output for this thread to compute, stored in registers
  // reg. buffers for one strip each from in and filts, for the same filts_ix_out_chan_elem
  float filts_strip[%(work_out_chan_dim)]; // across output chans (stride is blk_filt_ix_sz )
  float in_strip[%(work_pels_dim)]; // across pels (approx square block in x/y space, favoring x if sqrt() not integer)

  int filts_off_thr = ( %(GRP_ID_1D_out_chan_blk)*%(work_out_chan_tile_dim) + %(LOC_ID_1D_out_chan_tile) )*%(work_out_chan_dim)*%(filts_out_chan_sz);
  int in_off_thr = ( %(GRP_ID_1D_pels_blk)*%(work_pels_tile_dim) + %(LOC_ID_1D_pels_tile) )*%(work_pels_dim)*%(in_x_sz);

  // iteratate over filter elements
  for( int32_t ic = 0; ic < %(in_chan_dim); ic += %(Kb) ) {
    //(inner_loop_body);
    filts_off_thr += %(filts_in_chan_sz)*%(Kb);
    in_off_thr += %(in_chan_sz)*%(Kb);
  }
  // load per-block biases into smem
  if( flags == 2 ) { return; }
  // load biases into filts_strip
  //(bias_loads);
  // add bias to each elem of out_tile[] and store the results to out[]
  //(stores);
}

