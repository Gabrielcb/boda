# comparison test (with cublas by default via default value of op_tune_comp)
boda cnn_op_info --cnn-func-sigs-fn='%(boda_test_dir)'/sgemm-ops-small.txt --op-info-tab-fn=sgemm-info-tab.tex --op-eff-tab-fn=sgemm-eff-tab.tex  --rtc='(be=nvrtc)' --gen-data='(type=foo,str_vals=(vi=0.0f,mode=5))' --rtc-comp='(be=nvrtc)'


# cublas perf sweep
boda cnn_op_info --cnn-func-sigs-fn='%(boda_test_dir)'/sgemm-ops-small.txt --op-info-tab-fn=cublas-sgemm-info-tab.tex --op-eff-tab-fn=cublas-sgemm-eff-tab.tex --rtc='(be=nvrtc)' --gen-data='(type=foo,str_vals=(vi=0.0f,mode=5))' --op-tune='(use_culibs=1)'

# cublas sweep results
$128 \dx 128 \dx 128$ & \verb|cublas_sgemm| & 64.2us & 65.3GF/s & 990m\\ 
$256 \dx 256 \dx 256$ & \verb|cublas_sgemm| & 62.5us & 537GF/s & 8.14\\ 
$384 \dx 384 \dx 384$ & \verb|cublas_sgemm| & 76.5us & 1.48TF/s & 22.4\\ 
$512 \dx 512 \dx 512$ & \verb|cublas_sgemm| & 121us & 2.22TF/s & 33.7\\ 
$768 \dx 768 \dx 768$ & \verb|cublas_sgemm| & 218us & 4.16TF/s & 63.1\\ 
$1024 \dx 1024 \dx 1024$ & \verb|cublas_sgemm| & 625us & 3.44TF/s & 52.1\\ 
$1536 \dx 1536 \dx 1536$ & \verb|cublas_sgemm| & 1.37ms & 5.29TF/s & 80.1\\ 
$2048 \dx 2048 \dx 2048$ & \verb|cublas_sgemm| & 3.56ms & 4.83TF/s & 73.1\\ 

# 'standard' sgemm on titan X
$128 \dx 128 \dx 128$ & \verb|sgemm| & 78.5us & 53.5GF/s & 810m\\ 
$256 \dx 256 \dx 256$ & \verb|sgemm| & 142us & 237GF/s & 3.59\\ 
$384 \dx 384 \dx 384$ & \verb|sgemm| & 216us & 524GF/s & 7.94\\ 
$512 \dx 512 \dx 512$ & \verb|sgemm| & 320us & 838GF/s & 12.7\\ 
$768 \dx 768 \dx 768$ & \verb|sgemm| & 579us & 1.57TF/s & 23.7\\ 
$1024 \dx 1024 \dx 1024$ & \verb|sgemm| & 1.48ms & 1.45TF/s & 22.0\\ 
$1536 \dx 1536 \dx 1536$ & \verb|sgemm| & 3.43ms & 2.11TF/s & 32.0\\ 
$2048 \dx 2048 \dx 2048$ & \verb|sgemm| & 7.56ms & 2.27TF/s & 34.4\\ 

# with Kb unrolling of 8
$128 \dx 128 \dx 128$ & \verb|sgemm| & 41.0us & 102GF/s & 1.55\\ 
$256 \dx 256 \dx 256$ & \verb|sgemm| & 64.5us & 520GF/s & 7.88\\ 
$384 \dx 384 \dx 384$ & \verb|sgemm| & 96.9us & 1.17TF/s & 17.7\\ 
$512 \dx 512 \dx 512$ & \verb|sgemm| & 147us & 1.82TF/s & 27.6\\ 
$768 \dx 768 \dx 768$ & \verb|sgemm| & 305us & 2.97TF/s & 45.0\\ 
$1024 \dx 1024 \dx 1024$ & \verb|sgemm| & 755us & 2.85TF/s & 43.1\\ 
$1536 \dx 1536 \dx 1536$ & \verb|sgemm| & 2.05ms & 3.54TF/s & 53.6\\ 
$2048 \dx 2048 \dx 2048$ & \verb|sgemm| & 5.07ms & 3.39TF/s & 51.3\\ 

# a bit better with 16x4 thread blocking (probably indicates issues with sm access pattern?)
# --op-tune='(MNt=16:4,MNb=8:16,Kb=8,use_local_mem=1,vw=1)
$128 \dx 128 \dx 128$ & \verb|sgemm| & 35.9us & 117GF/s & 1.77\\ 
$256 \dx 256 \dx 256$ & \verb|sgemm| & 59.4us & 565GF/s & 8.56\\ 
$384 \dx 384 \dx 384$ & \verb|sgemm| & 82.0us & 1.38TF/s & 20.9\\ 
$512 \dx 512 \dx 512$ & \verb|sgemm| & 133us & 2.02TF/s & 30.5\\ 
$768 \dx 768 \dx 768$ & \verb|sgemm| & 261us & 3.47TF/s & 52.6\\ 
$1024 \dx 1024 \dx 1024$ & \verb|sgemm| & 622us & 3.45TF/s & 52.3\\ 
$1536 \dx 1536 \dx 1536$ & \verb|sgemm| & 1.70ms & 4.27TF/s & 64.6\\ 
$2048 \dx 2048 \dx 2048$ & \verb|sgemm| & 4.31ms & 3.99TF/s & 60.4\\ 


# sweep using SD820 device:
boda cnn_op_info --cnn-func-sigs-fn='%(boda_test_dir)'/sgemm-ops-small.txt --op-info-tab-fn=SD820-sgemm-info-tab.tex --op-eff-tab-fn=SD820-sgemm-eff-tab.tex --rtc='(be=ipc,spawn_str=adb shell LD_LIBRARY_PATH=/data/local/lib /data/local/bin/boda,spawn_shell_escape_args=1,boda_parent_addr=tcp:10.0.0.100:12791)' --gen-data='(type=foo,str_vals=(vi=0.0f,mode=5))' --peak-flops=220e9 && cat SD820-sgemm-eff-tab.tex


# sweep using SD820 device (with cublas compare):
boda cnn_op_info --cnn-func-sigs-fn='%(boda_test_dir)'/sgemm-ops-small.txt --op-info-tab-fn=SD820-sgemm-info-tab.tex --op-eff-tab-fn=SD820-sgemm-eff-tab.tex --rtc='(be=ipc,spawn_str=adb shell LD_LIBRARY_PATH=/data/local/lib /data/local/bin/boda,spawn_shell_escape_args=1,boda_parent_addr=tcp:10.0.0.100:12791)' --gen-data='(type=foo,str_vals=(vi=0.0f,mode=5))' --peak-flops=220e9 --rtc-comp='(be=nvrtc)'
# TODO: investigate errors for 512 and 1024 sizes; UPDATE see log; seems like compiler bug? need to reduce/debug more.

# test case for 512x512 case:
boda cnn_op_info --cnn-func-sigs-fn='%(boda_test_dir)'/sgemm-ops-debug.txt --op-info-tab-fn=SD820-sgemm-info-tab.tex --op-eff-tab-fn=SD820-sgemm-eff-tab.tex  --rtc='(be=ipc,spawn_str=adb shell LD_LIBRARY_PATH=/data/local/lib /data/local/bin/boda,spawn_shell_escape_args=1,boda_parent_addr=tcp:10.0.0.100:12791)' --gen-data='(type=foo,str_vals=(vi=0.0f,mode=5))' --peak-flops=220e9 --rtc-comp='(be=nvrtc)'  --mad-toler=1e-3 --max-err=10 && cat SD820-sgemm-eff-tab.tex 

# 512x512 test case with t-tile-sz=8, sgemm-bsz=16, and remote gen_src=1 set. FIXME: seems to just straight-up crash now? runs with MNb set to 8:8, 16:8, or 8:16, but produces incorrect results in all cases. the 16:8 case is extra neat?
moskewcz@maaya:~/git_work/boda/run/tr1$ boda cnn_op_info --cnn-func-sigs-fn='%(boda_test_dir)'/sgemm-ops-debug.txt --op-info-tab-fn=SD820-sgemm-info-tab.tex --op-eff-tab-fn=SD820-sgemm-eff-tab.tex  --rtc='(be=ipc,remote_rtc=(be=ocl,gen_src=1,gen_src_output_dir=/data/local/rtc-gen-src),spawn_str=adb shell LD_LIBRARY_PATH=/data/local/lib /data/local/bin/boda,spawn_shell_escape_args=1,boda_parent_addr=tcp:10.0.0.100:12791)' --gen-data='(type=foo,str_vals=(vi=0.0f,mode=600))' --peak-flops=220e9 --rtc-comp='(be=nvrtc)'  --mad-toler=1e-3 --max-err=10 --op-tune='(MNt=8:8,MNb=16:16,Kb=1)' && cat SD820-sgemm-eff-tab.tex 

# note: works on nvidia (ocl/nvrtc). fails on SD820. adding redundant index set fixes issue. 
# seems to be reading from bogus location in b[]. compiler bug? some undefined behavior that works on nVidia? hmm.

# magic props for SDP:
moskewcz@maaya:~$ adb shell getprop | grep cl
[debug.cl.enable.blocking]: [1]
[debug.cl.profiler]: [1]

adb shell setprop debug.cl.profiler 1
adb shell setprop debug.cl.enable.blocking 1

# to clear blocking[/profiler]:
adb shell setprop debug.cl.enable.blocking \'\'
adb shell setprop debug.cl.profiler \'\'



sgemm__K_512__M_512__N_512__Mg_8__Ng_8__Mb_8__Nb_8__Kb_1__Mt_8__Nt_8 (no local memory version)

 Instruction stats
- All Instructions:      599,    1580 (rpt), ratio  2.64
- ALUs          :      289,     289 (rpt), ratio  1.00
- Total NOPs    :      282,    1053 (rpt), ratio  3.73
- NOPs          :       75,     432 (rpt), ratio  5.76
- Post-NOPs     :      207,     621 (rpt), ratio  3.00
- MOVs          :      146,     149 (rpt), ratio  1.02
- Loads/Stores  :       86,     148 (rpt), ratio  1.72
- ldp          :       16,      63 (rpt), ratio  3.94
- ldg          :        4,      16 (rpt), ratio  4.00
- stp          :        2,       5 (rpt), ratio  2.50
- stg          :       64,      64 (rpt), ratio  1.00
- Flow Instrs   :        3
- Short sync flags:       67
- Long sync flags :        7
- Full Registers  :       23
- uGPR Registers  :        4
- Unified Regs    :       23
- Scratch space   :      256
- Total footprint :      624
- Maximal Waves   :        2 (A5x)

sgemm__K_512__M_512__N_512__Mg_4__Ng_4__Mb_16__Nb_16__Kb_1__Mt_8__Nt_8 ( no local memory )

- Instruction stats
- All Instructions:      600,    1551 (rpt), ratio  2.59
- ALUs          :      291,     291 (rpt), ratio  1.00
- Total NOPs    :      276,    1019 (rpt), ratio  3.69
- NOPs          :       71,     408 (rpt), ratio  5.75
- Post-NOPs     :      205,     611 (rpt), ratio  2.98
- MOVs          :      148,     151 (rpt), ratio  1.02
- Loads/Stores  :       87,     148 (rpt), ratio  1.70
- ldp          :       17,      63 (rpt), ratio  3.71
- ldg          :        4,      16 (rpt), ratio  4.00
- stp          :        2,       5 (rpt), ratio  2.50
- stg          :       64,      64 (rpt), ratio  1.00
- Flow Instrs   :        3
- Short sync flags:       66
- Long sync flags :        7
- Full Registers  :       23
- uGPR Registers  :        4
- Unified Regs    :       23
- Scratch space   :      256
- Total footprint :      624
- Maximal Waves   :        2 (A5x)


using --t-tile-sz=8 --sgemm-bsz=16 --local-mem=0:

$128 \dx 128 \dx 128$ & \verb|sgemm| & 644us & 6.51GF/s & 2.96\\ 
$256 \dx 256 \dx 256$ & \verb|sgemm| & 1.29ms & 26.1GF/s & 11.8\\ 
$384 \dx 384 \dx 384$ & \verb|sgemm| & 5.49ms & 20.6GF/s & 9.38\\ 
$512 \dx 512 \dx 512$ & \verb|sgemm| & 10.5ms & 25.7GF/s & 11.7\\ 
$768 \dx 768 \dx 768$ & \verb|sgemm| & 33.0ms & 27.5GF/s & 12.5\\ 
$1024 \dx 1024 \dx 1024$ & \verb|sgemm| & 77.6ms & 27.7GF/s & 12.6\\ 
$1536 \dx 1536 \dx 1536$ & \verb|sgemm| & 254ms & 28.5GF/s & 13.0\\ 
$2048 \dx 2048 \dx 2048$ & \verb|sgemm| & 621ms & 27.7GF/s & 12.6\\ 

# initial version of sgemm_simd, basen on sgemm_no_local with vectorized global loads/stores
# --op-tune='(MNt=8:8,MNb=16:16,Kb=1,use_local_mem=2,vw=8)'
$128 \dx 128 \dx 128$ & \verb|sgemm_simd| & 255us & 16.4GF/s & 7.48\\ 
$256 \dx 256 \dx 256$ & \verb|sgemm_simd| & 511us & 65.7GF/s & 29.8\\ 
$384 \dx 384 \dx 384$ & \verb|sgemm_simd| & 2.10ms & 54.0GF/s & 24.5\\ 
$512 \dx 512 \dx 512$ & \verb|sgemm_simd| & 3.58ms & 75.1GF/s & 34.1\\ 
$768 \dx 768 \dx 768$ & \verb|sgemm_simd| & 11.5ms & 78.7GF/s & 35.8\\ 
$1024 \dx 1024 \dx 1024$ & \verb|sgemm_simd| & 27.8ms & 77.3GF/s & 35.1\\ 
$1536 \dx 1536 \dx 1536$ & \verb|sgemm_simd| & 88.4ms & 82.0GF/s & 37.3\\ 
$2048 \dx 2048 \dx 2048$ & \verb|sgemm_simd| & 219ms & 78.6GF/s & 35.7\\ 

# initial version of sgemm_simd_local with --op-tune='(MNt=4:4,MNb=16:16,Kb=4,use_local_mem=3,vw=4)' note: competetive
# with sgemm_simd, but not exactly better, except maybe tiny case? however, this is (by far) the closest we've gotten to
# being able to use local memory well. in particular, not that *both* using a smaller # of threads *and* using inner
# loop unrolling are neccessary to get good perf. it's unclear if this might be improved or if it's important for more
# general problem sizes or cnn calculations.

$128 \dx 128 \dx 128$ & \verb|sgemm_simd_local| & 78.0us & 53.8GF/s & 24.4\\ 
$256 \dx 256 \dx 256$ & \verb|sgemm_simd_local| & 579us & 58.0GF/s & 26.3\\ 
$384 \dx 384 \dx 384$ & \verb|sgemm_simd_local| & 1.88ms & 60.3GF/s & 27.4\\ 
$512 \dx 512 \dx 512$ & \verb|sgemm_simd_local| & 4.45ms & 60.3GF/s & 27.4\\ 
$768 \dx 768 \dx 768$ & \verb|sgemm_simd_local| & 14.9ms & 60.8GF/s & 27.6\\ 
$1024 \dx 1024 \dx 1024$ & \verb|sgemm_simd_local| & 35.8ms & 60.0GF/s & 27.3\\ 
$1536 \dx 1536 \dx 1536$ & \verb|sgemm_simd_local| & 126ms & 57.6GF/s & 26.2\\ 
$2048 \dx 2048 \dx 2048$ & \verb|sgemm_simd_local| & 313ms & 54.9GF/s & 24.9\\ 

Instruction stats (for sgemm_simd_local)
- All Instructions:      166,     244 (rpt), ratio  1.47
- ALUs          :       97,     130 (rpt), ratio  1.34
- Half ALUs     :        2,       2 (rpt), ratio  1.00
- Total NOPs    :       15,      39 (rpt), ratio  2.60
- NOPs          :       13,      35 (rpt), ratio  2.69
- Post-NOPs     :        2,       4 (rpt), ratio  2.00
- MOVs          :       33,      52 (rpt), ratio  1.58
- Loads/Stores  :       16,      64 (rpt), ratio  4.00
- ldg          :        2,       8 (rpt), ratio  4.00
- ldl          :        8,      32 (rpt), ratio  4.00
- stg          :        4,      16 (rpt), ratio  4.00
- stl          :        2,       8 (rpt), ratio  4.00
- Flow Instrs   :        3
- Sync Instrs   :        2
- Barriers      :        2
- Short sync flags:        7
- Long sync flags :        4
- Full Registers  :       14
- Half Registers  :        1
- uGPR Registers  :        4
- Unified Regs    :       15
- Total footprint :      240
- Maximal Waves   :        4 (A5x)

# FIXME/TODO: track ocl backend version, and check local vs. remote version in rtc_ipc to avoid mismatch errors? not
  obvious how to do this usefully: (1) most changes to ocl_util.cc would require updating remote version, but how to we
  version one object file? hash of object post compilation? hash of source file? (2) if we track changes only to
  ocl_util.cc, what about changes to headers/etc that effect the behavior of ocl_util.cc (not relevant if we use
  binary/object versioning ...



# k1conv/sgemm comparison debugging. k1conv 'fast' version (hacked-up writing):

- Instruction stats
- All Instructions:       93,     122 (rpt), ratio  1.31
- ALUs          :       31,      35 (rpt), ratio  1.13
- Total NOPs    :       15,      33 (rpt), ratio  2.20
- NOPs          :       11,      24 (rpt), ratio  2.18
- Post-NOPs     :        4,       9 (rpt), ratio  2.25
- MOVs          :       28,      31 (rpt), ratio  1.11
- Loads/Stores  :       20,      29 (rpt), ratio  1.45
- ldp          :        7,       7 (rpt), ratio  1.00
- ldg          :        3,       9 (rpt), ratio  3.00
- stp          :        2,       5 (rpt), ratio  2.50
- stg          :        8,       8 (rpt), ratio  1.00
- Flow Instrs   :        3
- Short sync flags:        2
- Long sync flags :        2
- Full Registers  :        6
- uGPR Registers  :        4
- Unified Regs    :        6
- Scratch space   :      256
- Total footprint :      352
- Maximal Waves   :       10 (A5x)

# k1conv/sgemm comparison debugging. k1conv 'slow' version (correct, normal writing):

