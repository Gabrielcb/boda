# basic net flops analysis (added 2016.01.26) -- customize options as needed. in-dims is optional (to override net)
boda cnet_ana --in-model=firenet8-CE-0.125 --in-dims='(img=64)' --print-ops=1 && python ../../pysrc/flops.py --ai-mnk=1 --per-layer=1 --per-layer-in-info=0

# basic caffe/boda compute comparison/testing
moskewcz@maaya:~/git_work/boda/run/tr1$ boda test_compute --model-name=firenet8-CE-0.125 --wins-per-image=1 --imgs='(pil_fn=%(boda_test_dir)/pascal/head_1/%%s.txt)' --run-cnet='(in_dims=(img=32))' --cf1='(mode=rtc,per_call_fn=out.py,enable_k1conv=1,enable_tconv=1,enable_write_xpose=1)' --max-err=1 && python ../../pysrc/flops.py --ai-mnk=1 --per-layer=1 --per-layer-in-info=0

# capture classify (alexnet_conv classification, 227x227 input size)
boda capture_classify --model-name=alexnet_ng_conv --cnet_predict="(max_num_disp=10,out_node_name=fc8)" --capture='(cap_res=320:240)'

# detection example, using naive FC version of alexnet, with input increased in size to 451x451, yielding an 8x8 output
# (as opposed to the normal 1x1 output of classification). note: the detection results aren't useful/correct, but this
#  illustrates the flow/code-paths for detection
moskewcz@maaya:~/git_work/boda/run/tr1$ boda capture_classify  --model-name=alexnet_ng_conv --cnet_predict="(max_num_disp=30,in_dims=(x=451,y=451))" --capture='(cap_res=640:480)'


# ----v updated 2015.12.15 v----


# conv_pyra nin_imagenet_nopad (8x8 at nominal size) # note: may fail depending on OpenGL texure limits
# boda conv_pyra --model-name=nin_imagenet_nopad --cnet_predict='(in_dims=(x=419,y=419))' --capture='(cap_res=640:480)' --out_node_name=cccp8 --ipp='(bin_sz=1200:1200)'

# smaller version of above (should work across more OpenGL envs)
boda conv_pyra --model-name=nin_imagenet_nopad --cnet_predict='(in_dims=(x=227,y=227))' --capture='(cap_res=320:240)' --out_node_name=cccp8 --ipp='(bin_sz=600:600)' 

# ----v not up to date v----

# choose MODEL from this list: alexnet, alexnet_conv, nin_imagenet, nin_imagenet_nopad

# typical capture_feats command (alexnet_conv, 227x227 input size):
MODEL=alexnet_conv; boda capture_feats --run_cnet="(in_sz=227 227,ptt_fn=%(models_dir)/${MODEL}/deploy.prototxt,trained_fn=%(models_dir)/${MODEL}/best.caffemodel,out_layer_name=conv2)" --capture='(cap_res=320 240)'


# conv_pyra alexnet_conv  (8x8 at nominal size)
MODEL=alexnet_conv; boda conv_pyra --cnet_predict="(in_sz=451 451,ptt_fn=%(models_dir)/${MODEL}/deploy.prototxt,trained_fn=%(models_dir)/${MODEL}/best.caffemodel)" --capture='(cap_res=640 480)' --out_layer_name=prob --ipp="(bin_sz=1500 1500,num_upsamp_octaves=0)" 

# conv_pyra alexnet_conv detection (WIP)
MODEL=alexnet_conv; time boda conv_pyra --cnet_predict="(in_sz=451 451,ptt_fn=%(models_dir)/${MODEL}/deploy.prototxt,trained_fn=%(models_dir)/${MODEL}/best.caffemodel)" --capture='(cap_res=640 480)' --out_layer_name=prob --ipp="(bin_sz=1500 1500,num_upsamp_octaves=1)" --disp-feats=0 


# big nin features
MODEL=nin_imagenet_nopad; boda conv_pyra --cnet_predict="(in_sz=419 419,ptt_fn=%(models_dir)/${MODEL}/deploy.prototxt,trained_fn=%(models_dir)/${MODEL}/best.caffemodel)" --capture='(cap_res=640 480)' --out_layer_name=relu12 --ipp="(bin_sz=2000 2000,num_upsamp_octaves=1)"
